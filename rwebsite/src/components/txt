// RobotDetailDrawer.js
import React, { useEffect, useState } from "react";
import { Drawer, Select, Spin, message, Badge, Button } from "antd";
import { DownloadOutlined } from "@ant-design/icons";

import axios from "axios"; // 引入 axios

const { Option } = Select;

const RobotDetailDrawer = ({ visible, onClose, selectedRobot }) => {
  const [model, setModel] = useState("");
  const [name, setName] = useState("");
  const [loading, setLoading] = useState(true);
  const [softwarePackages, setSoftwarePackages] = useState([]);
  const [packageLoading, setPackageLoading] = useState(true);
  const [webSocket, setWebSocket] = useState(null); // 用于存储WebSocket实例
  const [isOnline, setIsOnline] = useState(false); // 连接状态
  const [selectedPackagePath, setSelectedPackagePath] = useState(""); // 存储所选软件包的路径
  const [isDownloading, setIsDownloading] = useState(false); // 添加下载状态

  useEffect(() => {
    // 仅在抽屉打开时建立WebSocket连接
    let ws;

    const initializeWebSocket = () => {
      ws = new WebSocket(`ws://192.168.0.169:9090`); // 根据需要调整WebSocket URL

      ws.onopen = () => {
        message.success("WebSocket连接已建立");
        setIsOnline(true); // 更新状态为在线
      };

      ws.onmessage = (event) => {
        // 处理接收到的消息
        const messageData = JSON.parse(event.data);
        if (messageData.code === -1) {
          message.error(messageData.errmsg);
          setIsDownloading(false); //重置状态
        } else if (messageData.code === 0) {
          message.success("软件包下载成功！");
          setIsDownloading(false); //重置状态
        }
      };

      ws.onerror = (error) => {};

      ws.onclose = () => {
        message.warning("WebSocket连接已关闭");
        setIsOnline(false);
      };

      setWebSocket(ws);
    };

    if (visible && selectedRobot) {
      initializeWebSocket();
      fetchRobotDetails();
      fetchSoftwarePackages();
    }

    // 在抽屉关闭或组件卸载时清理WebSocket连接
    return () => {
      if (ws) {
        ws.close();
      }
    };
  }, [visible, selectedRobot]);

  const fetchRobotDetails = async () => {
    setLoading(true);
    try {
      const response = await axios.post("http://127.0.0.1:8080/getrobotinfo", {
        robotid: selectedRobot,
      });

      if (response.data.code === 0) {
        setModel(response.data.model);
        setName(response.data.name);
        message.success("获取机器人信息成功！");
      } else {
        message.error("获取机器人信息失败！");
      }
    } catch (error) {
      message.error("连接远程服务器失败！");
    } finally {
      setLoading(false);
    }
  };

  const fetchSoftwarePackages = async () => {
    setPackageLoading(true);
    try {
      const response = await axios.get("http://127.0.0.1:8080/getpackages");

      if (response.data.code === 0) {
        const packages = response.data.packages.map((pkg) => JSON.parse(pkg));
        setSoftwarePackages(packages);
        message.success("获取软件包信息成功！");
      } else {
        message.error("获取软件包信息失败！");
      }
    } catch (error) {
      message.error("连接远程服务器失败！");
    } finally {
      setPackageLoading(false);
    }
  };
  const handlePackageChange = (value) => {
    const selectedPackage = softwarePackages.find((pkg) => pkg.id === value);
    if (selectedPackage) {
      setSelectedPackagePath(selectedPackage.path); // 存储所选软件包的路径
    }
  };
  // 点击下载按钮时发送文件路径到服务器并接收文件
  const handleDownload = async () => {
    if (selectedPackagePath) {
      if (!webSocket || webSocket.readyState !== WebSocket.OPEN) {
        message.error("机器人离线 无法执行");
        return;
      }
      setIsDownloading(true); // 设置为正在下载状态
      try {
        message.success("软件包下载请求已发送！");
        const response = await axios.post(
          "http://127.0.0.1:8080/getfile",
          {
            path: selectedPackagePath,
          },
          { responseType: "blob" } // 设置响应类型为blob
        );

        if (response.status === 404) {
          message.error("获取软件包资源失败!");
          setIsDownloading(false); //重置状态
        } else {
          const fileData = response.data;
          const filename = selectedPackagePath.split("/").pop(); // 获取文件名

          // 通过 FileReader 读取文件数据
          const reader = new FileReader();
          reader.onload = function (event) {
            const arrayBuffer = event.target.result; // 获取二进制数据
            // 将 ArrayBuffer 转换为 Uint8Array
            const byteArray = new Uint8Array(arrayBuffer);

            if (webSocket && webSocket.readyState === WebSocket.OPEN) {
              // 创建一个JSON对象，包含文件内容和文件名
              const dataToSend = {
                type: "Package",
                filename: filename,
                filedata: Array.from(byteArray),
              };

              // 发送 JSON 字符串
              webSocket.send(JSON.stringify(dataToSend));
            }
          };
          reader.readAsArrayBuffer(fileData); // 读取文件为 ArrayBuffer
        }
      } catch (error) {
        message.error("软件包下载请求失败！");
        setIsDownloading(false); //重置状态
      }
    } else {
      message.warning("请选择软件包");
    }
  };

  const handleClose = () => {
    if (isDownloading) {
      message.warning("下载正在进行中，请等待下载完成！");
    } else {
      onClose(); // 允许关闭
    }
  };

  return (
    <Drawer
      title="详细信息"
      placement="top"
      onClose={handleClose}
      open={visible}
      width={500}
    >
      <div>
        <span>
          机器人ID: <span style={{ color: "#595959" }}>{selectedRobot}</span>
        </span>
        <span style={{ marginLeft: "80px" }}>可下载软件包:</span>

        {packageLoading ? (
          <Spin size="small" style={{ marginLeft: 10 }} />
        ) : (
          <>
            <Select
              style={{ width: 250, height: 25, marginLeft: 10 }}
              placeholder="选择软件包"
              onChange={handlePackageChange}
            >
              {softwarePackages.map((pkg) => (
                <Option key={pkg.id} value={pkg.id}>
                  {pkg.name}
                </Option>
              ))}
            </Select>
            <Button
              type="primary"
              icon={<DownloadOutlined />}
              style={{ marginLeft: 10 }}
              onClick={handleDownload}
              loading={isDownloading}
            />
          </>
        )}
      </div>
      {loading ? (
        <Spin style={{ marginTop: 20 }} />
      ) : (
        <div>
          <p style={{ marginTop: "10px" }}>
            型号: <span style={{ color: "#595959" }}>{model}</span>
          </p>
          <p style={{ marginTop: "10px" }}>
            昵称: <span style={{ color: "#595959" }}>{name}</span>
          </p>
          <Badge
            status={isOnline ? "success" : "error"}
            style={{ marginLeft: "3px" }}
          />
          <span
            style={{
              color: isOnline ? "#52c41a" : "#f5222d", // 颜色与Badge一致
              marginLeft: 5, // 适当的间隔
            }}
          >
            {isOnline ? "在线" : "离线"}
          </span>
        </div>
      )}
    </Drawer>
  );
};

export default RobotDetailDrawer;
